# -- Prerequisites --
#
# Before running LAMMPS on this file, you must have already...
# 1) Run cellpack2lt.py to create the "system.lt" file moltemplate needs
# 2) Run "moltemplate.sh system.lt" to create the
#   "system.data", "system.in.init", and "system.in.settings" files LAMMPS needs

# -- Init Section --
# boundary f f f

include system.in.init



# Specify the custom Gaussian force field style we will use during this step:
include system.in.init.soft

# -- Atom Definition Section --

read_data system.data

# -- Settings Section --

include system.in.settings

# Now load the custom Gaussian force parameters we will use during this step:
# (Normally these are included in "sytem.in.settings", but not in this example.)



# -- Run Section --
#comment for debug display the bycycle



#todump
dump            1 todump custom 100 traj_min_soft.lammpstrj id mol type xu yu zu ix iy iz# x y z 
dump_modify 1 sort id	

thermo_style    custom step temp pe etotal epair ebond eangle edihed
thermo          100       # time interval for printing out "thermo" data
thermo_modify   norm yes flush yes


# Molecules containing multiple atoms use rigid-body integrators to hold
# each molecule together and preserve its shape (while allowing it to move).
# The group of atoms named "gRigid" contains only these atoms.
# (This group is defined in system.in.settings)

fix fxRigid mobile  rigid molecule   #(move the atoms in the "gRigid" group)
#In a Brownian dynamics context, gamma = Kb T / D, where Kb = Boltzmannâ€™s constant, T = temperature, and D = particle diffusion coefficient. D can be written as Kb T / (3 pi eta d), where eta = dynamic viscosity of the frictional fluid and d = diameter of particle. This means gamma = 3 pi eta d, and thus is proportional to the viscosity of the fluid and the particle diameter.

# Molecules containing only one atom do not need to be treated as rigid
# bodies. We do not need to use rigid body integrators for them. Instead
# we can use ordinary "fix nve" to integrate their equations of motion.
# The group of atoms named "gOrdinary" contains only these atoms.
# (This group is defined in system.in.settings)

fix fxNVE   gOrdinary nve            #(move the atoms in the "gOrdinary" group)


#pair_modify mix arithmetic
#comm_modify mode multi
#comm_modify mode single
neighbor 40.0 bin
neigh_modify one 50000 page 500000
#neighbor 2.0 multi
#default is page = 100000, one = 2000, and binsize = 0.0.


pair_style soft 300.0
include system.in.settings.pair.coeffs.soft
variable prefactor equal ramp(0,100000)
fix adapt1 all adapt 1 pair soft a * * v_prefactor

timestep        0.01
fix fxLan     all langevin 0.00 0.00 1 48279
run 3000
unfix fxLan

write_data system_after_min_soft.data
